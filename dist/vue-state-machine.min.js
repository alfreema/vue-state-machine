!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("xstate")):"function"==typeof define&&define.amd?define(["xstate"],t):e.vueStateMachine=t(e.xstate)}(this,function(e){"use strict";const t={namespaced:!0,state:{machineName:null,currentState:null,machines:{}},getters:{},mutations:{SET_CURRENT_STATE(e,t){e.currentState=t.currentState},SET_MACHINE(e,t){e.machineName=t.machineName,e.currentState=e.machines[t.machineName].currentState},ADD_MACHINE(e,t){e.machines[t.machineName]=t.machine}},actions:{setCurrentState(e,t){console.log("vsm-store:actions:setCurrentState():currentState="+t.currentState),e.commit({type:"SET_CURRENT_STATE",currentState:t.currentState.value})},setMachine(e,t){console.log("vsm-store:actions:setMachine():machineName="+t.machineName),!1!==e.state.machines.hasOwnProperty(t.machineName)?e.commit({type:"SET_MACHINE",machineName:t.machineName}):console.error("vsm: machine is not found. Please check the machine name:",t.machineName)},addMachine(e,t){console.log("vsm-store:actions:addMachine():machineName="+t.machineName+":machine="+t.machine),t.machine.currentState=t.machine.initial,console.log("vsm-store:actions:addMachine():currentState="+t.machine.currentState),e.commit({type:"ADD_MACHINE",machineName:t.machineName,machine:t.machine})}}};let n={install:function(n,a,i){const c=Object.assign({moduleName:"vsm"},i).moduleName;if(a.registerModule(c,t),!1===a.state.hasOwnProperty(c))return void console.error("vsm: vsm vuex module is not correctly initialized. Please check the module name:",c);let s=function(e){let t=arguments,n="",i={};t.length>0&&(n=t[1]),t.length>1&&(i=t[2]),console.log("vsm-plugin:transitionMachine():begin:currentState="+e+":type="+n+":params="+i);let s=a.state[c].machineName;console.log("vsm-plugin:transitionMachine():machineName="+s);let o=a.state[c].machines[s];console.log("vsm-plugin:transitionMachine():machine="+o);const m=o.transition(e,n);console.log("vsm-plugin:transitionMachine():nextState="+m),a.dispatch({type:`${c}/setCurrentState`,currentState:m}),m.actions.forEach(e=>{a.dispatch(s+"/"+e,{type:n,params:i,history:m.history})})};n.prototype.$vsm={transition:function(){console.log("vsm-plugin:transition():begin");let e=a.state[c].currentState;return s(e,...arguments)},set:function(e){a.dispatch({type:`${c}/setMachine`,machineName:e})},add:function(t,n){return a.dispatch({type:`${c}/addMachine`,machineName:t,machine:e.Machine(n)})}}}};return{store:t,plugin:n}});